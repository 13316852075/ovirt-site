-# If source isn't specified in locals, then default to "navigation"
-#
-# Example for custom source:
-#
-#   = partial :nav, locals: { source: "navigation" }
-#

- source ||= "navigation"


-# Additional classes are also supported on the nav
-#
-# Example:
-#
-#   = partial :nav, locals: { nav_class: "nav_inverse" }
-#
-# nav_class ||= "nav-pills"
-# nav_class ||= "nav-stacked"
- nav_class ||= "nav-stacked"

-# Unless specified, the link for any brand used is /
-#
- brand_link ||= "/"


-# Navigation is automatically rendered from ../../data/{source}.yml
-# There is support for one-level depth.
-# Top level items should start with a "-"; second-level should be indented.
-#
-# Exmaple:
-#
-# - Foo: "foo_link"
-# - Bar: "optional_fallback_link_for_nojavascript"
-#   Baz: "baz_link"
-#   Baz2: "baz2_link"
-#
-# Foo is a normal link.
-# Bar is a dropdown title (with an optional link â€” it can be empty), as it has children
-# Baz and Baz2 are children links to Bar.

:ruby

  def nav_link(text, link)
    active_class = normalize_url(link) == normalize_url(current_page.url) ? '.active' : ''

    text = link.split('/').last.humanize if text.empty? || text == "-"

    html = capture_haml do
      haml_tag "li" + active_class do
        haml_tag :a, text, { href: link || '#' }
      end
    end

    #link_to text, link || '#', class: 'navlink-' + text.parameterize + active_class

    html
    #current_page.url
  end

  def nav_header(text)
    capture_haml do
      haml_tag "li.disabled" do
        haml_tag :a, text
      end
    end
  end


- if data.has_key? source

  %ul.nav(role="navigation" class="#{nav_class}")

    - data[source].each do |item|

      - if item.is_a?(String)

        = nav_header item

      - else

        - item.each do |text, link|

          - if item.count == 1

            - if link
              = nav_link text, link

            - else
              = nav_header text

          - else

            %li

              -# Check for the existance of a link
              - if !link
                = nav_header text

              - else
                = nav_link text, link

              %ul.nav(role="menu")
                - item.each do |text, link|
                  - unless text == text
                    = nav_link text, link
